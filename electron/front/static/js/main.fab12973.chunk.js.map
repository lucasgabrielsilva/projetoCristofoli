{"version":3,"sources":["assets/LogoCristofoli.svg","configs/index.js","pages/login/styles.js","pages/login/index.js","assets/LogoCristofoli3.svg","components/menuBar/styles.js","components/menuBar/index.js","components/card/styles.js","components/card/index.js","components/cardInvalid/styles.js","components/cardInvalid/index.js","pages/monitor/styles.js","pages/monitor/index.js","components/graphic/styles.js","components/graphic/index.js","pages/teste1/styles.js","pages/teste1/index.js","pages/analyze/styles.js","components/graphicAnalyze/index.js","pages/analyze/index.js","components/graphicCompare/index.js","pages/compare/styles.js","pages/compare/index.js","pages/sendData/styles.js","pages/sendData/index.js","index.js"],"names":["infos","vdr300","name","states","csvHead","scales","title","min","max","id","position","parameters","idScales","color","unit","majorTicks","highLights","from","to","vdr301","Container","styled","div","DivLogin","DivImage","DivConfig","DivEntry","Text","h4","DivOptions","DivPort","DivAlerts","Image","img","Select","select","Button","button","ButtonRefresh","Login","useState","port","setPort","listPorts","setListPorts","portsSignal","setPortsSignal","error","setError","redirect","setRedirect","Object","keys","ModelData","model","setModel","mode","setMode","destiny","setDestiny","progress","setProgess","setShowButton","handleConnect","data","window","api","send","handleUpdateListPort","handleTryConnect","event","a","preventDefault","handleProgress","useEffect","receive","stop","src","Logo","alt","type","checked","onChange","e","value","target","map","portName","onClick","setTimeout","size","style","backgroundColor","disabled","DivExit","DivImg","Item","label","ButtonExit","MenuBar","props","goTo","setGoTo","handleChangeWindow","get","handleTryChangeWindow","changeWindow","index","location","href","indexOf","substring","length","DivTitle","DivCanvas","DivInfo","canvasConfigBase","minorTicks","tickSide","numberSide","fontNumbersSize","borderShadowWidth","ticksWidth","ticksWidthMinor","colorPlate","borders","strokeStick","needleType","needleWidth","colorNeedle","colorNeedleEnd","needleSide","animation","animationRule","barBeginCircle","barWidth","Card","refCanvas","useRef","current","options","renderTo","minValue","maxValue","highlights","LinearGauge","draw","fontSize","fontWeight","ref","DivCards","Monitor","setData","handleDataA","temp","forEach","parameter","i","push","handleCardInvalid","canvas","Graphic","Chart","getContext","datasets","showLine","borderColor","hidden","fill","yAxisID","responsive","maintainAspectRatio","duration","elements","line","tension","borderWidth","point","radius","tooltips","enabled","intersect","display","legend","labels","fontColor","handleClickLegend","plugins","zoom","threshold","drag","pan","xAxes","time","displayFormats","second","tooltipFormat","distribution","gridLines","ticks","scaleLabel","labelString","yAxes","scale","drawOnChartArea","lines","maxTicksLimit","suggestedMax","chart","dataset","x","timeStamp","y","hasOwnProperty","update","clean","reset","resetZoom","Date","now","getDatasetMeta","datasetIndex","aux","every","element","DivTest","Header","Title","ButtonBar","Main","DivGraph","DivResult","TextArea","textarea","dataToCsv","result","timeInitial","Teste1","setValue","start","statusButton","setStatusButton","textAreaValue","setTextAreaValue","isRunning","setIsRunning","setClean","setLines","Moment","add","toDate","getTime","handleDataB","handleStop","handleDataC","concat","unshift","GraphicAnalyze","modelo","parseInt","Analyze","textArea","setTextArea","setZoom","load","setLoad","handleLoad","split","parseFloat","avg","toFixed","handleCalc","join","replace","GraphicCompare","text","responsiveAnimationDuration","data1","setData1","data2","setData2","show","setShow","setType","setUnit","textArea1","setTextArea1","textArea2","setTextArea2","handleLoad1","handleLoad2","setInterval","input","opacity","Form","form","Fields","FormLeft","FormRigth","Input","lineColor","InputFile","DivFiles","DivButton","SendData","schema","yup","shape","required","serie","matches","code","cycle","description","file","test","handleTest","useForm","resolver","yupResolver","register","handleSubmit","getValues","errors","colorName","setColorName","colorSerie","setColorSerie","colorCode","setColorCode","colorFile","setColorFile","colorModel","setColorModel","colorCycle","setColorCycle","colorDescription","setColorDescription","files","setFiles","setOpacity","sending","setSending","handleReport","onSubmit","onBlur","fields","isValid","then","placeholder","message","selected","multiple","path","onload","ReactDOM","render","basename","component","exact","Compare","document","getElementById"],"mappings":"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","file":"static/js/main.fab12973.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/LogoCristofoli.57beb317.svg\";","const infos = {\n    vdr300: {\n        name: 'VDR 3.00',\n        states: false,\n        csvHead: [\n            'modelo',\n            'timeStamp',\n            'Tensão(V)',\n            'Resistência(ºC)',\n            'Vaso de Pressão(ºC)',\n            'Pressão(Kgf/cm²)',\n            'tempo de pressurização',\n            'tempo de esterilização',\n            'tempo de despressurização',\n            'tempo de secagem',\n            'tempo de resfriamento',\n            'tempo total',\n        ],\n        scales: [\n            {\n                title: 'Linhas da escala da temperatura',\n                name: 'Temperatura(ºC)',\n                min: 0,\n                max: 300,\n                id: 'temperature',\n                position: 'right',\n            },\n            {\n                title: 'Linhas da escala de pressão',\n                name: 'Pressão(Kgf/cm²)',\n                min: 0,\n                max: 2.8,\n                id: 'pressure',\n                position: 'left',\n            },\n            {\n                title: 'Linhas da escala da tensão',\n                name: 'Tensão(V)',\n                min: 80,\n                max: 250,\n                id: 'tension',\n                position: 'left',\n            },\n        ],\n        parameters: [\n            {\n                title: 'Dados da resistência',\n                name: 'Resistência(ºC)',\n                idScales: 'temperature',\n                color: 'green',\n                unit: 'ºC',\n                min: 0,\n                max: 300,\n                majorTicks: ['0', '60', '120', '180', '240', '300'],\n                highLights: [\n                    {\n                        from: '0',\n                        to: '180',\n                        color: 'lightgreen',\n                    },\n                    {\n                        from: '180',\n                        to: '240',\n                        color: 'yellow',\n                    },\n                    {\n                        from: '240',\n                        to: '300',\n                        color: 'coral',\n                    },\n                ],\n            },\n            {\n                title: 'Dados do vaso de pressão',\n                name: 'Vaso de Pressão(ºC)',\n                idScales: 'temperature',\n                color: 'blue',\n                unit: 'ºC',\n                min: 0,\n                max: 150,\n                majorTicks: ['0', '30', '60', '90', '120', '150'],\n                highLights: [\n                    {\n                        from: '0',\n                        to: '90',\n                        color: 'lightgreen',\n                    },\n                    {\n                        from: '90',\n                        to: '120',\n                        color: 'yellow',\n                    },\n                    {\n                        from: '120',\n                        to: '150',\n                        color: 'coral',\n                    },\n                ],\n            },\n            {\n                title: 'Dados da pressão',\n                name: 'Pressão(Kgf/cm²)',\n                idScales: 'pressure',\n                color: 'orange',\n                unit: 'Kgf/cm²',\n                min: 0,\n                max: 2.8,\n                majorTicks: ['0', '0.56', '1.12', '1.68', '2.24', '2.8'],\n                highLights: [\n                    {\n                        from: '0',\n                        to: '1.68',\n                        color: 'lightgreen',\n                    },\n                    {\n                        from: '1.68',\n                        to: '2.24',\n                        color: 'yellow',\n                    },\n                    {\n                        from: '2.24',\n                        to: '2.8',\n                        color: 'coral',\n                    },\n                ],\n            },\n            {\n                title: 'Dados da tensão',\n                name: 'Tensão(V)',\n                idScales: 'tension',\n                color: 'red',\n                unit: 'V',\n                min: 80,\n                max: 250,\n                majorTicks: ['80', '114', '148', '182', '216', '250'],\n                highLights: [\n                    {\n                        from: '80',\n                        to: '182',\n                        color: 'lightgreen',\n                    },\n                    {\n                        from: '182',\n                        to: '216',\n                        color: 'yellow',\n                    },\n                    {\n                        from: '216',\n                        to: '250',\n                        color: 'coral',\n                    },\n                ],\n            },\n        ],\n    },\n    vdr301: {\n        name: 'VDR 3.01',\n        states: false,\n        csvHead: [\n            'modelo',\n            'timeStamp',\n            'Tensão(V)',\n            'Resistência(ºC)',\n            'Vaso de Pressão(ºC)',\n            'Pressão(Kgf/cm²)',\n            'tempo de pressurização',\n            'tempo de esterilização',\n            'tempo de despressurização',\n            'tempo de secagem',\n            'tempo de resfriamento',\n            'tempo total',\n        ],\n        scales: [\n            {\n                title: 'Linhas da escala da temperatura',\n                name: 'Temperatura(ºC)',\n                min: 0,\n                max: 300,\n                id: 'temperature',\n                position: 'right',\n            },\n            {\n                title: 'Linhas da escala de pressão',\n                name: 'Pressão(Kgf/cm²)',\n                min: 0,\n                max: 2.8,\n                id: 'pressure',\n                position: 'left',\n            },\n            {\n                title: 'Linhas da escala da tensão',\n                name: 'Tensão(V)',\n                min: 80,\n                max: 250,\n                id: 'tension',\n                position: 'left',\n            },\n        ],\n        parameters: [\n            {\n                title: 'Dados da resistência',\n                name: 'Resistência(ºC)',\n                idScales: 'temperature',\n                color: 'green',\n                unit: 'ºC',\n                min: 0,\n                max: 300,\n                majorTicks: ['0', '60', '120', '180', '240', '300'],\n                highLights: [\n                    {\n                        from: '0',\n                        to: '180',\n                        color: 'lightgreen',\n                    },\n                    {\n                        from: '180',\n                        to: '240',\n                        color: 'yellow',\n                    },\n                    {\n                        from: '240',\n                        to: '300',\n                        color: 'coral',\n                    },\n                ],\n            },\n            {\n                title: 'Dados da pressão',\n                name: 'Pressão(Kgf/cm²)',\n                idScales: 'pressure',\n                color: 'orange',\n                unit: 'Kgf/cm²',\n                min: 0,\n                max: 2.8,\n                majorTicks: ['0', '0.56', '1.12', '1.68', '2.24', '2.8'],\n                highLights: [\n                    {\n                        from: '0',\n                        to: '1.68',\n                        color: 'lightgreen',\n                    },\n                    {\n                        from: '1.68',\n                        to: '2.24',\n                        color: 'yellow',\n                    },\n                    {\n                        from: '2.24',\n                        to: '2.8',\n                        color: 'coral',\n                    },\n                ],\n            },\n            {\n                title: 'Dados da tensão',\n                name: 'Tensão(V)',\n                idScales: 'tension',\n                color: 'red',\n                unit: 'V',\n                min: 80,\n                max: 250,\n                majorTicks: ['80', '114', '148', '182', '216', '250'],\n                highLights: [\n                    {\n                        from: '80',\n                        to: '182',\n                        color: 'lightgreen',\n                    },\n                    {\n                        from: '182',\n                        to: '216',\n                        color: 'yellow',\n                    },\n                    {\n                        from: '216',\n                        to: '250',\n                        color: 'coral',\n                    },\n                ],\n            },\n        ],\n    },\n};\nexport default infos;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    flex-flow: column nowrap;\n    justify-content: center;\n    align-items: center;\n    background-color: #0f5aa1;\n`;\n\nconst DivLogin = styled.div`\n    height: 55vh;\n    width: 28vw;\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: center;\n    align-items: center;\n    background-color: white;\n    border-radius: 10px;\n`;\n\nconst DivImage = styled.div`\n    height: 28%;\n    width: 85%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    border-radius: 30% 30% 0% 0%;\n    background-color: inherit;\n`;\n\nconst DivConfig = styled.div`\n    height: 35%;\n    width: 95%;\n    margin-top: 15%;\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: center;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst DivEntry = styled.div`\n    height: 10%;\n    width: 75%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst Text = styled.h4`\n    color: #003b4d;\n    background-color: inherit;\n`;\n\nconst DivOptions = styled.div`\n    height: 10vh;\n    width: 100%;\n    background-color: inherit;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-evenly;\n    align-items: center;\n`;\n\nconst DivPort = styled.div`\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst DivAlerts = styled.div`\n    height: 10vh;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst Image = styled.img`\n    height: 100%;\n    width: 100%;\n    border-radius: 30% 30% 0% 0%;\n    background-color: inherit;\n`;\n\nconst Select = styled.select`\n    color: #003b4d;\n    border: 2px solid #003b4d;\n    background-color: inherit;\n    border-radius: 20%;\n    cursor: pointer;\n`;\n\nconst Button = styled.button`\n    padding: 2%;\n    border: none;\n    border-radius: 5px;\n    color: white;\n    background-color: #0f5aa1;\n    cursor: pointer;\n    &:hover {\n        background-color: #0083c1;\n        color: white;\n    }\n    &:disabled {\n        opacity: 0.2;\n        cursor: default;\n    }\n`;\n\nconst ButtonRefresh = styled.button`\n    max-height: 35%;\n    max-width: 40%;\n    border: 2px solid #003b4d;\n    border-radius: 20%;\n    color: white;\n    background-color: #003b4d;\n    cursor: pointer;\n    &:hover {\n        background-color: white;\n        color: #003b4d;\n    }\n`;\n\nexport {\n    Container,\n    DivLogin,\n    DivOptions,\n    DivPort,\n    DivAlerts,\n    DivImage,\n    DivConfig,\n    DivEntry,\n    Text,\n    ButtonRefresh,\n    Image,\n    Select,\n    Button,\n};\n","import React, { useEffect, useState } from 'react';\nimport { FiRefreshCcw } from 'react-icons/fi';\nimport { Redirect } from 'react-router-dom';\nimport Logo from '../../assets/LogoCristofoli.svg';\nimport ModelData from '../../configs';\n\nimport {\n    Container,\n    DivLogin,\n    DivOptions,\n    DivAlerts,\n    DivPort,\n    ButtonRefresh,\n    Image,\n    Select,\n    Button,\n    DivConfig,\n    DivImage,\n    DivEntry,\n    Text,\n} from './styles';\n\nfunction Login() {\n    const [port, setPort] = useState('');\n    const [listPorts, setListPorts] = useState([]);\n    const [portsSignal, setPortsSignal] = useState(false);\n    const [error, setError] = useState(false);\n    const [redirect, setRedirect] = useState(false);\n    const [model, setModel] = useState(Object.keys(ModelData)[0]);\n    const [mode, setMode] = useState(false);\n    const [destiny, setDestiny] = useState('/analise');\n    const [progress, setProgess] = useState('Verificando atualizações...');\n    const [showButton, setShowButton] = useState(false);\n\n    const handleConnect = (data) => {\n        if (data) {\n            window.api.send('Model', model);\n            setRedirect(true);\n        } else {\n            setError(true);\n        }\n    };\n\n    const handlePort = (event) => {\n        event.preventDefault();\n        setPort(event.target.value);\n        setError(false);\n    };\n\n    const handleUpdatePorts = (event) => {\n        event.preventDefault();\n        setPortsSignal(true);\n        setTimeout(() => {\n            setPortsSignal(false);\n        }, 1500);\n        window.api.send('listPorts');\n    };\n\n    const handleUpdateListPort = (data) => {\n        setListPorts(data);\n        setPort(`${data[0]}`);\n    };\n\n    const handleTryConnect = async (event) => {\n        event.preventDefault();\n        if (!mode) {\n            setRedirect(true);\n        }\n        window.api.send('portConnect', port);\n    };\n\n    const handleChangeModel = (event) => {\n        event.preventDefault();\n        setModel(event.target.value);\n        window.api.send('model', event.target.value);\n        setError(false);\n    };\n\n    const handleChangeMode = (event) => {\n        if (!mode) {\n            setDestiny('/monitor');\n            window.api.send('Mode', true);\n        } else {\n            setDestiny('/analise');\n            window.api.send('Mode', false);\n        }\n        setMode(!mode);\n    };\n\n    const handleProgress = (data) => {\n        if (!data) {\n            setShowButton(true);\n            setProgess(data);\n        } else {\n            setProgess(data);\n        }\n    };\n\n    useEffect(() => {\n        window.api.send('Update');\n        window.api.send('Mode', false);\n        window.api.receive('connectionPort', handleConnect);\n        window.api.receive('listPort', handleUpdateListPort);\n        window.api.receive('progress', handleProgress);\n        window.api.send('listPorts');\n        window.api.send('model', Object.keys(ModelData)[0]);\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            window.api.stop('listPorts');\n            window.api.stop('connectionPort');\n        };\n    }, []);\n\n    return (\n        <Container>\n            <DivLogin>\n                <DivImage>\n                    <Image src={Logo} alt=\"logo da cristofoli\" />\n                </DivImage>\n                <DivConfig>\n                    {!progress ? (\n                        <Text>\n                            Conectar autoclave:{' '}\n                            <input\n                                type=\"checkbox\"\n                                checked={mode}\n                                onChange={(e) => handleChangeMode(e)}\n                            />\n                        </Text>\n                    ) : null}\n                    <DivOptions>\n                        {mode ? (\n                            <>\n                                <Text>\n                                    modelo:\n                                    <Select\n                                        title=\"Selecione o modelo da autoclave\"\n                                        value={model}\n                                        onChange={handleChangeModel}\n                                    >\n                                        {Object.keys(ModelData).map((value) => {\n                                            return (\n                                                <option value={value}>\n                                                    {ModelData[value].name}\n                                                </option>\n                                            );\n                                        })}\n                                    </Select>\n                                </Text>\n                                <DivPort>\n                                    <Text>\n                                        porta:\n                                        <Select\n                                            title=\"Selecione a porta a qual a autoclave está conectada\"\n                                            value={port}\n                                            onChange={handlePort}\n                                        >\n                                            {listPorts.map((portName) => {\n                                                return (\n                                                    <option\n                                                        value={`${portName}`}\n                                                    >\n                                                        {' '}\n                                                        {portName}{' '}\n                                                    </option>\n                                                );\n                                            })}\n                                        </Select>\n                                    </Text>\n                                    <ButtonRefresh\n                                        title=\"Atulizar lista das portas COM\"\n                                        onClick={handleUpdatePorts}\n                                    >\n                                        <FiRefreshCcw\n                                            size={16}\n                                            style={{\n                                                backgroundColor: 'inherit',\n                                            }}\n                                        />\n                                    </ButtonRefresh>\n                                </DivPort>\n                            </>\n                        ) : null}\n                    </DivOptions>\n                    <DivAlerts>\n                        {progress || null}\n                        {portsSignal ? (\n                            <Text>Portas COM atualizadas</Text>\n                        ) : null}\n                        {error ? (\n                            <h4\n                                style={{\n                                    color: 'red',\n                                    backgroundColor: 'inherit',\n                                }}\n                            >\n                                Erro na conexão com a porta COM\n                            </h4>\n                        ) : null}\n                    </DivAlerts>\n                </DivConfig>\n                <DivEntry>\n                    <Button disabled={progress} onClick={handleTryConnect}>\n                        Entrar\n                    </Button>\n                </DivEntry>\n                {redirect ? <Redirect to={destiny} /> : null}\n            </DivLogin>\n        </Container>\n    );\n}\n\nexport default Login;\n","export default __webpack_public_path__ + \"static/media/LogoCristofoli3.f5c9c012.svg\";","import styled from 'styled-components';\n\nconst Container = styled.div`\n    height: 100vh;\n    width: 140px;\n    display: flex;\n    flex-flow: column wrap;\n    align-items: center;\n    justify-content: space-between;\n    border-right: 1px solid #003b4d;\n    background-color: #0f5aa1;\n    border-radius: 0px 5px 0px 5px;\n\n    @media (max-width: 800px) {\n        justify-content: flex-start;\n    }\n`;\n\nconst DivOptions = styled.div`\n    max-height: 95%;\n    width: 100%;\n    display: flex;\n    flex-flow: column nowrap;\n    align-items: center;\n    justify-content: center;\n    background-color: inherit;\n`;\n\nconst DivExit = styled.div`\n    height: 5%;\n    width: 100%;\n    align-self: flex-end;\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: center;\n    justify-content: center;\n    background-color: #fafafa;\n`;\n\nconst DivImg = styled.div`\n    max-height: 40%;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    background-color: #0f5aa1;\n`;\n\nconst Image = styled.img`\n    height: 90%;\n    width: 90%;\n    background-color: inherit;\n`;\n\nconst Title = styled.label`\n    padding-top: 5%;\n    padding-bottom: 5%;\n    width: 100%;\n    font-size: 90%;\n    font-style: italic;\n    color: white;\n    background-color: #0083c1;\n    align-self: auto;\n`;\n\nconst Item = styled.button`\n    height: 15%;\n    width: 100%;\n    background-color: inherit;\n    color: white;\n    border: none;\n    padding: 15px;\n    font-size: 16px;\n    cursor: pointer;\n    &:disabled {\n        opacity: 0.2;\n        cursor: default;\n    }\n    &:hover {\n        background-color: white;\n        color: #0083c1;\n    }\n`;\n\nconst ButtonExit = styled.button`\n    height: 100%;\n    width: 100%;\n    background-color: #0f5aa1;\n    color: white;\n    border: none;\n    text-decoration: none;\n    text-align: center;\n    cursor: pointer;\n    &:hover {\n        background-color: white;\n        color: #003b4d;\n    }\n`;\n\nexport {\n    Container,\n    Image,\n    DivImg,\n    DivOptions,\n    DivExit,\n    Title,\n    Item,\n    ButtonExit,\n};\n","import React, { useState, useEffect } from 'react';\nimport { BiExit } from 'react-icons/bi';\nimport { Redirect } from 'react-router-dom';\nimport Logo from '../../assets/LogoCristofoli3.svg';\nimport {\n    Container,\n    DivOptions,\n    DivImg,\n    DivExit,\n    Image,\n    Title,\n    Item,\n    ButtonExit,\n} from './styles.js';\n\nfunction MenuBar(props) {\n    const [redirect, setRedirect] = useState(false);\n    const [goTo, setGoTo] = useState('#');\n    const [mode, setMode] = useState(false);\n\n    const handleChangeWindow = (data) => {\n        if (data) {\n            window.api.stop('A');\n            window.api.stop('B');\n            window.api.stop('changeWindow');\n            window.api.stop('listPort');\n            window.api.stop('connectionPort');\n            setRedirect(true);\n        } else {\n            setGoTo('#');\n        }\n    };\n\n    useEffect(async () => {\n        window.api.receive('changeWindow', handleChangeWindow);\n        setMode(await window.api.get('mode'));\n    }, []);\n\n    const handleTryChangeWindow = (data) => {\n        if (props.changeWindow) {\n            const index = window.location.href.indexOf('#/');\n            if (\n                window.location.href.substring(\n                    index + 1,\n                    window.location.href.length,\n                ) !== data\n            ) {\n                setGoTo(data);\n                window.api.send('openModal', data);\n            }\n        } else if (data === '/') {\n            setGoTo(data);\n            window.api.send('Exit');\n        } else {\n            setGoTo(data);\n            setRedirect(true);\n        }\n    };\n\n    return (\n        <Container>\n            <DivOptions>\n                <DivImg>\n                    <Image src={Logo} alt=\"logo da cristofoli\" />\n                </DivImg>\n                <Item\n                    title=\"Analisar dados salvos previamente\"\n                    onClick={() => handleTryChangeWindow('/analise')}\n                >\n                    {' '}\n                    Analisar{' '}\n                </Item>\n                <Item\n                    title=\"Comparar dados salvos previamente\"\n                    onClick={() => handleTryChangeWindow('/compare')}\n                >\n                    {' '}\n                    Comparar{' '}\n                </Item>\n                <Item\n                    title=\"Monitorar dados da autoclave\"\n                    onClick={() => handleTryChangeWindow('/monitor')}\n                    disabled={!mode}\n                >\n                    {' '}\n                    Monitorar{' '}\n                </Item>\n                <Item\n                    title=\"Obter dados via datalog\"\n                    onClick={() => handleTryChangeWindow('/teste1')}\n                    disabled={!mode}\n                >\n                    {' '}\n                    DataLog{' '}\n                </Item>\n                <Item\n                    title=\"Enviar Relatório\"\n                    onClick={() => handleTryChangeWindow('/sendData')}\n                    disabled={false}\n                >\n                    {' '}\n                    Reportar{' '}\n                </Item>\n            </DivOptions>\n            <DivExit>\n                <ButtonExit\n                    title=\"Sair\"\n                    onClick={() => handleTryChangeWindow('/')}\n                >\n                    <BiExit size={24} style={{ backgroundColor: 'inherit' }} />\n                </ButtonExit>\n            </DivExit>\n            {redirect ? <Redirect to={goTo} /> : null}\n        </Container>\n    );\n}\n\nexport default MenuBar;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n    height: 25%;\n    width: 50%;\n    background-color: white;\n    display: flex;\n    flex-flow: column wrap;\n    justify-content: space-around;\n    align-items: center;\n    border: 2px solid gray;\n\n    @media (max-width: 800px) {\n        width: 100%;\n    }\n`;\n\nconst DivTitle = styled.div`\n    height: 15%;\n    align-self: auto;\n    display: flex;\n    background-color: #214f62;\n    flex-flow: row nowrap;\n`;\n\nconst DivCanvas = styled.div`\n    align-self: auto;\n    height: 65%;\n    width: 95%;\n`;\n\nconst DivInfo = styled.div`\n    height: 15%;\n    align-self: auto;\n    display: flex;\n    flex-flow: row nowrap;\n`;\n\nexport { Container, DivTitle, DivCanvas, DivInfo };\n","import React, { useRef, useEffect } from 'react';\nimport { LinearGauge } from 'canvas-gauges';\nimport { Container, DivCanvas, DivTitle, DivInfo } from './styles';\n\nconst canvasConfigBase = {\n    minorTicks: 5,\n    tickSide: 'left',\n    numberSide: 'left',\n    fontNumbersSize: 30,\n    borderShadowWidth: 0,\n    ticksWidth: 25,\n    ticksWidthMinor: 15,\n    colorPlate: 'white',\n    borders: false,\n    strokeStick: false,\n    needleType: 'arrow',\n    needleWidth: 7,\n    colorNeedle: '#434343',\n    colorNeedleEnd: false,\n    needleSide: 'left',\n    animation: false,\n    animationRule: 'linear',\n    barBeginCircle: false,\n    barWidth: 0,\n};\n\nexport default function Card(props) {\n    const refCanvas = useRef(null);\n\n    useEffect(() => {\n        if (refCanvas.current) {\n            if (!refCanvas.current.options) {\n                canvasConfigBase.renderTo = refCanvas.current;\n                canvasConfigBase.minValue = props.minValue;\n                canvasConfigBase.maxValue = props.maxValue;\n                canvasConfigBase.majorTicks = props.majorTicks;\n                canvasConfigBase.highlights = props.highlights;\n                canvasConfigBase.value = props.value;\n                refCanvas.current = new LinearGauge(canvasConfigBase).draw();\n            }\n        }\n    }, []);\n\n    useEffect(() => {\n        if (refCanvas.current) {\n            refCanvas.current.value = props.value;\n        }\n    }, [props.value]);\n\n    return (\n        <Container>\n            <DivTitle>\n                <label style={{ fontSize: '16px', backgroundColor: 'white', fontWeight: 'bold' }}>\n                    {props.title}\n                </label>\n            </DivTitle>\n            <DivCanvas>\n                <canvas ref={refCanvas} />\n            </DivCanvas>\n            <DivInfo>\n                <label\n                    style={{ fontSize: '18px', backgroundColor: 'white', fontWeight: 'bold' }}\n                >{`${props.value}${props.unit}`}</label>\n            </DivInfo>\n        </Container>\n    );\n}\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n    height: 25%;\n    width: 50%;\n    background-color: white;\n    display: flex;\n    flex-flow: column wrap;\n    justify-content: space-evenly;\n    align-items: center;\n    border: 2px solid gray;\n\n    @media (max-width: 800px) {\n        width: 100%;\n    }\n`;\n\nexport { Container };\n","import React from 'react';\nimport { VscError } from 'react-icons/vsc';\nimport { Container } from './styles';\n\nexport default function Card() {\n    return (\n        <Container>\n            <label style={{ fontSize: '14px', backgroundColor: 'white', fontWeight: 'bold' }}>\n                Parâmetro inválido nesse modelo\n            </label>\n            <VscError\n                size={48}\n                style={{ color: 'coral', backgroundColor: 'white' }}\n            />\n        </Container>\n    );\n}\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    flex-flow: column wrap;\n    justify-content: flex-start;\n    align-content: flex-start;\n`;\n\nconst DivCards = styled.div`\n    height: 100%;\n    width: calc(100vw - 140px);\n    background-color: gray;\n    align-self: auto;\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: flex-start;\n    align-content: flex-start;\n\n    @media (max-width: 800px) {\n        flex-flow: column nowrap;\n        justify-content: flex-start;\n    }\n`;\n\nconst Header = styled.div`\n    height: 10%;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    background-color: white;\n`;\n\nconst Title = styled.label`\n    align-self: auto;\n    margin-left: 3%;\n    font-size: 200%;\n    color: #0083c1;\n    background-color: inherit;\n`;\n\nexport { Container, DivCards, Header, Title };\n","import React, { useState, useEffect } from 'react';\nimport MenuBar from '../../components/menuBar';\nimport Card from '../../components/card';\nimport CardInvalid from '../../components/cardInvalid';\nimport { Container, DivCards, Header, Title } from './styles';\nimport ModelData from '../../configs';\n\nfunction Monitor() {\n    const [resize, setResize] = useState(true);\n    const [data, setData] = useState(false);\n    const [model, setModel] = useState(false);\n\n    const handleCard = (event) => {\n        return model.parameters.map((parameter) => {\n            return (\n                <Card\n                    title={parameter.name}\n                    value={data[parameter.name]}\n                    majorTicks={parameter.majorTicks}\n                    highlights={parameter.highLights}\n                    minValue={parameter.min}\n                    maxValue={parameter.max}\n                    unit={parameter.unit}\n                />\n            );\n        });\n    };\n\n    const handleCardInvalid = (event) => {\n        const temp = [];\n        for (let i = 0; i < 8 - model.parameters.length; i += 1) {\n            temp.push(0);\n        }\n        return temp.map(() => {\n            return <CardInvalid />;\n        });\n    };\n\n    const handleDataA = (value) => {\n        const temp = {};\n        Object.keys(value).forEach((parameter) => {\n            temp[parameter] = value[parameter];\n        });\n        setData(temp);\n    };\n\n    useEffect(async () => {\n        setModel(ModelData[`${await window.api.get('model')}`]);\n        window.api.receive('A', handleDataA);\n    }, []);\n\n    useEffect(() => {\n        return () => window.api.stop('A');\n    }, []);\n\n    return (\n        <Container>\n            <MenuBar changeWindow={false} />\n            <DivCards>\n\n                {model ? handleCard() : null}\n                {model ? handleCardInvalid() : null}\n            </DivCards>\n        </Container>\n    );\n}\n\nexport default Monitor;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-flow: column nowrap;\n    justify-content: flex-start;\n    align-items: flex-start;\n    background-color: #fafafa;\n`;\n\nconst Canvas = styled.canvas`\n    background-color: #fafafa;\n`;\n\nexport { Container, Canvas };\n","import React, { useRef, useEffect, useState } from 'react';\nimport Chart from 'chart.js';\nimport * as Zoom from 'chartjs-plugin-zoom';\nimport ModelData from '../../configs';\nimport { Container } from './styles';\n\nfunction Graphic(props) {\n    const refCanvas = useRef(null);\n    const [model, setModel] = useState(false);\n\n    useEffect(async () => {\n        setModel(ModelData[`${await window.api.get('model')}`]);\n    }, []);\n\n    useEffect(() => {\n        if (model) {\n            refCanvas.current = new Chart(refCanvas.current.getContext('2d'), {\n                type: 'line',\n                data: {\n                    datasets: model.parameters.map((parameter) => {\n                        return {\n                            label: parameter.name,\n                            showLine: true,\n                            borderColor: parameter.color,\n                            backgroundColor: parameter.color,\n                            hidden: false,\n                            fill: false,\n                            data: [],\n                            yAxisID: parameter.idScales,\n                        };\n                    }),\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    animation: {\n                        duration: 0,\n                    },\n                    elements: {\n                        line: {\n                            tension: 0,\n                            borderWidth: 0.5,\n                        },\n                        point: {\n                            radius: 0,\n                        },\n                    },\n                    tooltips: {\n                        enabled: true,\n                        mode: 'nearest',\n                        intersect: false,\n                        position: 'average',\n                    },\n                    title: {\n                        display: false,\n                    },\n                    legend: {\n                        display: true,\n                        labels: {\n                            fontColor: 'black',\n                        },\n                        onClick: handleClickLegend,\n                    },\n                    plugins: {\n                        zoom: {\n                            zoom: {\n                                enabled: false,\n                                mode: 'xy',\n                                threshold: 0,\n                                drag: false,\n                            },\n                            pan: {\n                                enabled: false,\n                                mode: 'xy',\n                                threshold: 0,\n                            },\n                        },\n                    },\n                    scales: {\n                        xAxes: [\n                            {\n                                type: 'time',\n                                display: true,\n                                time: {\n                                    unit: 'second',\n                                    displayFormats: {\n                                        second: 'HH:mm:ss',\n                                    },\n                                    tooltipFormat: 'HH:mm:ss.SSS',\n                                },\n                                distribution: 'series',\n                                gridLines: {\n                                    display: true,\n                                    color: '#D3D3D3',\n                                },\n                                ticks: {\n                                    display: true,\n                                    fontColor: 'black',\n                                },\n                                scaleLabel: {\n                                    display: true,\n                                    labelString: 'Tempo Decorrido',\n                                    fontSize: 18,\n                                    fontColor: 'black',\n                                },\n                            },\n                        ],\n                        yAxes: model.scales.map((scale) => {\n                            return {\n                                display: true,\n                                scaleLabel: {\n                                    display: true,\n                                    labelString: scale.name,\n                                    fontColor: 'black',\n                                    fontSize: 14,\n                                },\n                                position: scale.position,\n                                gridLines: {\n                                    display: true,\n                                    color: '#d3d3d3',\n                                    drawOnChartArea: props.lines === scale.id,\n                                },\n                                ticks: {\n                                    display: true,\n                                    maxTicksLimit: 20,\n                                    min: scale.min,\n                                    suggestedMax: scale.max,\n                                    fontColor: 'black',\n                                },\n                                id: scale.id,\n                            };\n                        }),\n                    },\n                },\n            });\n        }\n    }, [model]);\n\n    useEffect(() => {\n        if (props.data && model) {\n            refCanvas.current.chart.data.datasets.forEach((dataset) => {\n                dataset.data.push({\n                    x: props.data.timeStamp,\n                    y: props.data[dataset.label],\n                });\n            });\n            if (\n                refCanvas.current.chart.options.scales.xAxes[0].ticks.hasOwnProperty(\n                    'max',\n                )\n            ) {\n                delete refCanvas.current.chart.options.scales.xAxes[0].ticks\n                    .max;\n            }\n            if (props.mode === 'realTime') {\n                refCanvas.current.chart.update(0);\n            }\n        }\n    }, [props.data]);\n\n    useEffect(() => {\n        if (props.clean && model) {\n            refCanvas.current.chart.reset();\n            refCanvas.current.chart.data.datasets.forEach((dataset) => {\n                if (dataset.label === 'Resistência(ºC)') {\n                    dataset.data = [];\n                } else if (dataset.label === 'Vaso de Pressão(ºC)') {\n                    dataset.data = [];\n                } else if (dataset.label === 'Pressão(Kgf/cm²)') {\n                    dataset.data = [];\n                } else {\n                    dataset.data = [];\n                }\n            });\n            refCanvas.current.chart.update(0);\n        }\n    }, [props.clean]);\n\n    useEffect(() => {\n        if (model) {\n            refCanvas.current.chart.options.scales.yAxes.forEach((scale) => {\n                if (scale.id === props.lines) {\n                    scale.gridLines.drawOnChartArea = true;\n                } else {\n                    scale.gridLines.drawOnChartArea = false;\n                }\n            });\n            refCanvas.current.chart.update(0);\n        }\n    }, [props.lines]);\n\n    useEffect(() => {\n        if (model) {\n            if (props.mode === 'analyze') {\n                refCanvas.current.chart.options.plugins.zoom.zoom.enabled = true;\n                refCanvas.current.chart.options.plugins.zoom.pan.enabled = true;\n            } else {\n                refCanvas.current.chart.resetZoom();\n                refCanvas.current.chart.options.scales.xAxes[0].ticks.max = Date.now();\n                refCanvas.current.chart.options.plugins.zoom.zoom.enabled = false;\n                refCanvas.current.chart.options.plugins.zoom.pan.enabled = false;\n            }\n            refCanvas.current.chart.update(0);\n        }\n    }, [props.mode]);\n\n    const handleClickLegend = (...data) => {\n        const id = refCanvas.current.getDatasetMeta(data[1].datasetIndex)\n            .yAxisID;\n        refCanvas.current.chart.data.datasets[\n            data[1].datasetIndex\n        ].hidden = !refCanvas.current.chart.data.datasets[data[1].datasetIndex]\n            .hidden;\n        if (\n            refCanvas.current.chart.data.datasets[data[1].datasetIndex].hidden\n        ) {\n            const aux = Object.keys(refCanvas.current.chart.data.datasets).map(\n                (dataset) => {\n                    if (\n                        refCanvas.current.chart.data.datasets[dataset]\n                            .yAxisID === id &&\n                        refCanvas.current.chart.data.datasets[dataset].hidden\n                    ) {\n                        return true;\n                    }\n                    if (\n                        refCanvas.current.chart.data.datasets[dataset]\n                            .yAxisID === id &&\n                        !refCanvas.current.chart.data.datasets[dataset].hidden\n                    ) {\n                        return false;\n                    }\n                },\n            );\n            if (\n                aux.every((element) => {\n                    return element !== false;\n                })\n            ) {\n                refCanvas.current.chart.options.scales.yAxes.forEach(\n                    (scale) => {\n                        if (scale.id === id) {\n                            scale.display = false;\n                        }\n                    },\n                );\n            }\n        } else {\n            refCanvas.current.chart.options.scales.yAxes.forEach((scale) => {\n                if (scale.id === id) {\n                    scale.display = true;\n                }\n            });\n        }\n        refCanvas.current.chart.update(0);\n    };\n\n    return <canvas style={{ backgroundColor: 'white' }} ref={refCanvas} />;\n}\n\nexport default Graphic;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    flex-flow: column wrap;\n    justify-content: flex-start;\n    align-content: flex-start;\n    background-color: white;\n`;\n\nconst DivTest = styled.div`\n    height: 100%;\n    width: calc(100% - 140px);\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: flex-start;\n    align-items: flex-start;\n    background-color: inherit;\n`;\n\nconst Header = styled.div`\n    height: 10%;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst Title = styled.label`\n    align-self: auto;\n    margin-left: 3%;\n    font-size: 200%;\n    color: #0f5aa1;\n    background-color: inherit;\n`;\n\nconst Button = styled.button`\n    align-self: auto;\n    height: 80%;\n    color: white;\n    margin: 2px;\n    border: none;\n    padding: 2px;\n    border: none;\n    background-color: #0f5aa1;\n    border-radius: 5px;\n    cursor: pointer;\n    &:hover {\n        border: 1px solid #0f5aa1;\n        background-color: white;\n        color: #0f5aa1;\n    }\n`;\n\nconst ButtonBar = styled.div`\n    height: 80%;\n    align-self: auto;\n    display: flex;\n    margin-right: 5px;\n    flex-flow: row nowrap;\n    justify-content: space-around;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst Main = styled.div`\n    height: 90%;\n    width: 100%;\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: center;\n    align-items: flex-start;\n    background-color: inherit;\n`;\n\nconst DivGraph = styled.div`\n    height: 85%;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst DivResult = styled.div`\n    height: 15%;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    border-top: 1px dotted black;\n`;\n\nconst TextArea = styled.textarea`\n    height: 100%;\n    width: 100%;\n    background-color: lightgray;\n    color: black;\n    font-size: 15px;\n    resize: none;\n`;\n\nconst Select = styled.select`\n    align-self: auto;\n    height: 80%;\n    color: white;\n    margin: 2px;\n    padding: 2px;\n    border: none;\n    background-color: #0f5aa1;\n    border-radius: 5px;\n    cursor: pointer;\n    &:hover {\n        border: 1px solid #0f5aa1;\n        background-color: white;\n        color: #0f5aa1;\n    }\n`;\n\nexport {\n    Container,\n    Button,\n    ButtonBar,\n    Title,\n    DivGraph,\n    DivTest,\n    TextArea,\n    Main,\n    Header,\n    DivResult,\n    Select,\n};\n","import React, { useEffect, useState } from 'react';\nimport Moment from 'moment';\nimport MenuBar from '../../components/menuBar';\nimport Graphic from '../../components/graphic';\nimport ModelData from '../../configs';\nimport Logo from '../../assets/LogoCristofoli3.svg';\nimport {\n    Container,\n    ButtonBar,\n    Title,\n    Button,\n    Header,\n    TextArea,\n    DivTest,\n    Main,\n    Select,\n    DivResult,\n    DivGraph,\n    DivButtons,\n    Menu,\n    Image,\n    Buttons,\n    DivAux\n} from './styles';\n\nlet dataToCsv = [];\n\nlet result = false;\nlet timeInitial = Date.now();\n\nfunction Teste1() {\n    const [value, setValue] = useState(false);\n\n    const [statusButton, setStatusButton] = useState({\n        start: false,\n        stop: true,\n        clean: true,\n    });\n    const [textAreaValue, setTextAreaValue] = useState('Aguardando...');\n    const [isRunning, setIsRunning] = useState(false);\n    const [clean, setClean] = useState(false);\n    const [mode, setMode] = useState('realTime');\n    const [lines, setLines] = useState('temperature');\n    const [model, setModel] = useState(false);\n\n    const handleTime = (now) => {\n        return Moment(now - timeInitial)\n            .add('-21', 'h')\n            .toDate();\n    };\n\n    const handleDataA = (data) => {\n        data.timeStamp = handleTime(data.timeStamp);\n        const temp = Object.keys(data).map((parameter) => {\n            return data[parameter];\n        });\n        temp[0] = temp[0].getTime();\n        dataToCsv.push(temp);\n        setValue(data);\n    };\n\n    function handleDataB(data) {\n        if (data) {\n            data.forEach((value) => {\n                dataToCsv[1].push(value);\n            });\n            result = true;\n        }\n        handleStop();\n    }\n\n    const handleDataC = (data) => {\n        setTextAreaValue('finalizando teste...');\n        if (data) {\n            setTextAreaValue(\n                textAreaValue.concat('\\narquivo salvo.\\nteste finalizado.'),\n            );\n        } else {\n            setTextAreaValue(\n                textAreaValue.concat(\n                    '\\narquivo não foi salvo.\\nteste finalizado.',\n                ),\n            );\n        }\n        if (result) {\n            setTextAreaValue(\n                textAreaValue.concat(\n                    `\\nResultado.\\ntempo de pressurização: ${dataToCsv[1][5]}\\ntempo de esterilização: ${dataToCsv[1][6]}\\ntempo de despressurização: ${dataToCsv[1][7]}\\ntempo de secagem: ${dataToCsv[1][8]}\\ntempo de resfriamento: ${dataToCsv[1][9]}\\ntempo total: ${dataToCsv[1][10]}\\n`,\n                ),\n            );\n        }\n        window.api.stop('C');\n    };\n\n    const handleStart = (event) => {\n        event.preventDefault();\n        window.api.receive('A', handleDataA);\n        window.api.receive('B', handleDataB);\n        window.api.receive('C', handleDataC);\n        setIsRunning(true);\n        setStatusButton({\n            start: true,\n            stop: false,\n            clean: true,\n        });\n        setTextAreaValue(\n            textAreaValue.concat('\\nIniciando...\\nrealizando testes...'),\n        );\n        timeInitial = Date.now();\n    };\n\n    const handleClean = (event) => {\n        event.preventDefault();\n        setClean(true);\n        setTimeout(() => {\n            setClean(false);\n        }, 100);\n        dataToCsv = model.csvHead;\n        result = false;\n        setStatusButton({\n            start: false,\n            stop: true,\n            clean: true,\n        });\n        setTextAreaValue('Aguardando...');\n    };\n\n    const handleStop = (event) => {\n        if (event) {\n            event.preventDefault();\n        }\n        setIsRunning(false);\n        setStatusButton({\n            start: true,\n            stop: true,\n            clean: false,\n        });\n        dataToCsv.forEach((line, index) => {\n            if (index === 1) {\n                line.unshift(`${window.api.get('model')}`);\n            } else if (index !== 0) {\n                line.unshift(null);\n            }\n        });\n        window.api.stop('A');\n        window.api.stop('B');\n        window.api.send('saveCSV', dataToCsv);\n    };\n\n    const handleChangeLines = (event) => {\n        event.preventDefault();\n        setLines(event.target.value);\n    };\n\n    const handleChangeMode = (event) => {\n        event.preventDefault();\n        setMode(event.target.value);\n    };\n\n    useEffect(async () => {\n        setModel(ModelData[`${await window.api.get('model')}`]);\n    }, []);\n\n    useEffect(() => {\n        if (model) {\n            dataToCsv = [model.csvHead];\n        }\n    }, [model]);\n\n    useEffect(() => {\n        return () => {\n            dataToCsv = [];\n            result = false;\n            window.api.stop('A');\n            window.api.stop('B');\n            window.api.stop('C');\n        };\n    }, []);\n\n    return (\n        <Container>\n             <MenuBar changeWindow={isRunning} />\n            <DivTest>\n                <Header>\n                    <Title>DataLogger</Title>\n                    <ButtonBar>\n                        <Button\n                            disabled={statusButton.start}\n                            onClick={(e) => handleStart(e)}\n                            title=\"Iniciar ciclo\"\n                        >\n                            {' '}\n                            Iniciar{' '}\n                        </Button>\n                        <Button\n                            disabled={statusButton.stop}\n                            onClick={(e) => handleStop(e)}\n                            title=\"Interromper ciclo\"\n                        >\n                            {' '}\n                            Parar{' '}\n                        </Button>\n                        <Button\n                            disabled={statusButton.clean}\n                            onClick={(e) => handleClean(e)}\n                            title=\"Limpar gráfico\"\n                        >\n                            {' '}\n                            Limpar{' '}\n                        </Button>\n                        <Select\n                            value={lines}\n                            onChange={(e) => handleChangeLines(e)}\n                            title=\"Selecionar linhas do gráfico\"\n                        >\n                            {model\n                                ? model.scales.map((scale) => {\n                                      return (\n                                          <option\n                                              title={scale.title}\n                                              value={scale.id}\n                                          >\n                                              {scale.name}\n                                          </option>\n                                      );\n                                  })\n                                : null}\n                        </Select>\n                        <Select\n                            value={mode}\n                            onChange={(e) => handleChangeMode(e)}\n                            title=\"Selecionar mode de visualização\"\n                        >\n                            <option\n                                title=\"Visualizar dados em tempo real\"\n                                value=\"realTime\"\n                            >\n                                Tempo Real{' '}\n                            </option>\n                            <option\n                                title=\"Analisar dados obtidos\"\n                                value=\"analyze\"\n                            >\n                                {' '}\n                                Analisar{' '}\n                            </option>\n                        </Select>\n                    </ButtonBar>\n                </Header>\n                <Main>\n                    <DivGraph>\n                        <Graphic\n                            data={value}\n                            clean={clean}\n                            mode={mode}\n                            lines={lines}\n                        />\n                    </DivGraph>\n                    <DivResult>\n                        <TextArea disabled value={textAreaValue} />\n                    </DivResult>\n                </Main>\n            </DivTest>\n        </Container>\n    );\n}\n\nexport default Teste1;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    flex-flow: column wrap;\n    justify-content: flex-start;\n    align-content: flex-start;\n    background-color: white;\n`;\n\nconst DivTest = styled.div`\n    height: 100%;\n    width: calc(100% - 140px);\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: flex-start;\n    align-items: flex-start;\n    background-color: inherit;\n`;\n\nconst Header = styled.div`\n    height: 10%;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst Title = styled.label`\n    align-self: auto;\n    margin-left: 3%;\n    font-size: 200%;\n    color: #0f5aa1;\n    background-color: inherit;\n`;\n\nconst Button = styled.button`\n    align-self: auto;\n    height: 80%;\n    color: white;\n    margin: 2px;\n    border: none;\n    padding: 2px;\n    border: none;\n    background-color: #0f5aa1;\n    border-radius: 5px;\n    cursor: pointer;\n    &:hover {\n        border: 1px solid #0f5aa1;\n        background-color: white;\n        color: #0f5aa1;\n    }\n`;\n\nconst ButtonBar = styled.div`\n    height: 80%;\n    align-self: auto;\n    display: flex;\n    margin-right: 5px;\n    flex-flow: row nowrap;\n    justify-content: space-around;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst Main = styled.div`\n    height: 90%;\n    width: 100%;\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: center;\n    align-items: flex-start;\n    background-color: inherit;\n`;\n\nconst DivGraph = styled.div`\n    height: 85%;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst DivResult = styled.div`\n    height: 15%;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    border-top: 1px dotted black;\n`;\n\nconst TextArea = styled.textarea`\n    height: 100%;\n    width: 100%;\n    background-color: lightgray;\n    color: black;\n    font-size: 15px;\n    resize: none;\n`;\n\nconst Select = styled.select`\n    align-self: auto;\n    height: 80%;\n    color: white;\n    margin: 2px;\n    padding: 2px;\n    border: none;\n    background-color: #0f5aa1;\n    border-radius: 5px;\n    cursor: pointer;\n    &:hover {\n        border: 1px solid #0f5aa1;\n        background-color: white;\n        color: #0f5aa1;\n    }\n`;\n\nexport {\n    Container,\n    Button,\n    ButtonBar,\n    Title,\n    DivGraph,\n    DivTest,\n    TextArea,\n    Main,\n    Header,\n    DivResult,\n    Select,\n};\n","import React, { useRef, useEffect, useState } from 'react';\nimport Chart from 'chart.js';\nimport * as Zoom from 'chartjs-plugin-zoom';\n\nfunction GraphicAnalyze(props) {\n    const refCanvas = useRef(null);\n\n    const handleSetData = () => {\n        if (refCanvas.current.data.datasets.length > 0 && props.data) {\n            refCanvas.current.chart.data.datasets.forEach((dataset) => {\n                dataset.data = props.data[dataset.label].map((value, index) => {\n                    return {\n                        x: parseInt(props.data.timeStamp[index], 10),\n                        y: value,\n                    };\n                });\n            });\n            refCanvas.current.chart.update(0);\n        }\n    };\n\n    const handleClickLegend = (...data) => {\n        const id = refCanvas.current.getDatasetMeta(data[1].datasetIndex)\n            .yAxisID;\n        refCanvas.current.chart.data.datasets[\n            data[1].datasetIndex\n        ].hidden = !refCanvas.current.chart.data.datasets[data[1].datasetIndex]\n            .hidden;\n        if (\n            refCanvas.current.chart.data.datasets[data[1].datasetIndex].hidden\n        ) {\n            const aux = Object.keys(refCanvas.current.chart.data.datasets).map(\n                (dataset) => {\n                    if (\n                        refCanvas.current.chart.data.datasets[dataset]\n                            .yAxisID === id &&\n                        refCanvas.current.chart.data.datasets[dataset].hidden\n                    ) {\n                        return true;\n                    }\n                    if (\n                        refCanvas.current.chart.data.datasets[dataset]\n                            .yAxisID === id &&\n                        !refCanvas.current.chart.data.datasets[dataset].hidden\n                    ) {\n                        return false;\n                    }\n                },\n            );\n            if (\n                aux.every((element) => {\n                    return element !== false;\n                })\n            ) {\n                refCanvas.current.chart.options.scales.yAxes.forEach(\n                    (scale) => {\n                        if (scale.id === id) {\n                            scale.display = false;\n                        }\n                    },\n                );\n            }\n        } else {\n            refCanvas.current.chart.options.scales.yAxes.forEach((scale) => {\n                if (scale.id === id) {\n                    scale.display = true;\n                }\n            });\n        }\n        refCanvas.current.chart.update(0);\n    };\n\n    useEffect(() => {\n        refCanvas.current = new Chart(refCanvas.current.getContext('2d'), {\n            type: 'line',\n            data: {\n                datasets: [],\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                animation: {\n                    duration: 0,\n                },\n                elements: {\n                    line: {\n                        tension: 0,\n                        borderWidth: 0.5,\n                    },\n                    point: {\n                        radius: 0,\n                    },\n                },\n                tooltips: {\n                    enabled: true,\n                    mode: 'nearest',\n                    intersect: false,\n                    position: 'average',\n                },\n                title: {\n                    display: false,\n                },\n                legend: {\n                    display: true,\n                    labels: {\n                        fontColor: 'black',\n                    },\n                    onClick: handleClickLegend,\n                },\n                plugins: {\n                    zoom: {\n                        zoom: {\n                            enabled: true,\n                            mode: 'xy',\n                            threshold: 0,\n                            drag: false,\n                        },\n                        pan: {\n                            enabled: true,\n                            mode: 'xy',\n                            threshold: 0,\n                        },\n                    },\n                },\n                scales: {\n                    xAxes: [\n                        {\n                            type: 'time',\n                            display: true,\n                            time: {\n                                unit: 'second',\n                                displayFormats: {\n                                    second: 'HH:mm:ss',\n                                },\n                                tooltipFormat: 'HH:mm:ss.SSS',\n                            },\n                            distribution: 'series',\n                            gridLines: {\n                                display: true,\n                                color: '#bababa',\n                            },\n                            ticks: {\n                                display: true,\n                                fontColor: 'black',\n                            },\n                            scaleLabel: {\n                                display: true,\n                                labelString: 'Tempo Decorrido',\n                                fontColor: 'black',\n                                fontSize: 18,\n                            },\n                        },\n                    ],\n                    yAxes: [],\n                },\n            },\n        });\n    }, []);\n\n    useEffect(async () => {\n        if (refCanvas.current.chart && typeof props.data.modelo === 'object') {\n            refCanvas.current.chart.options.scales.yAxes = props.data.modelo.scales.map(\n                (scale) => {\n                    return {\n                        display: true,\n                        scaleLabel: {\n                            display: true,\n                            labelString: scale.name,\n                            fontColor: 'black',\n                            fontSize: 14,\n                        },\n                        position: scale.position,\n                        gridLines: {\n                            display: true,\n                            color: '#bababa',\n                            drawOnChartArea: props.lines === scale.id,\n                        },\n                        ticks: {\n                            display: true,\n                            maxTicksLimit: 20,\n                            min: scale.min,\n                            suggestedMax: scale.max,\n                            fontColor: 'black',\n                        },\n                        id: scale.id,\n                    };\n                },\n            );\n            refCanvas.current.chart.data.datasets = props.data.modelo.parameters.map(\n                (parameter) => {\n                    return {\n                        label: parameter.name,\n                        showLine: true,\n                        borderColor: parameter.color,\n                        backgroundColor: parameter.color,\n                        fill: false,\n                        data: [],\n                        yAxisID: parameter.idScales,\n                    };\n                },\n            );\n            refCanvas.current.chart.update(0);\n            handleSetData();\n        }\n    }, [props.data]);\n\n    useEffect(() => {\n        if (refCanvas.current.chart.options.scales.yAxes.length > 0) {\n            refCanvas.current.chart.options.scales.yAxes.forEach((scale) => {\n                if (scale.id === props.lines) {\n                    scale.gridLines.drawOnChartArea = true;\n                } else {\n                    scale.gridLines.drawOnChartArea = false;\n                }\n            });\n            refCanvas.current.chart.update(0);\n        }\n    }, [props.lines]);\n\n    useEffect(() => {\n        if (refCanvas.current.chart) {\n            refCanvas.current.chart.resetZoom();\n            refCanvas.current.chart.update(0);\n        }\n    }, [props.zoom]);\n\n    return <canvas style={{ backgroundColor: 'white' }} ref={refCanvas} />;\n}\n\nexport default GraphicAnalyze;\n","import React, { useState } from 'react';\nimport { BsClockHistory } from 'react-icons/bs';\nimport MenuBar from '../../components/menuBar';\nimport ModelData from '../../configs';\n\nimport {\n    Container,\n    ButtonBar,\n    Title,\n    Button,\n    Header,\n    Select,\n    TextArea,\n    DivTest,\n    Main,\n    DivResult,\n    DivGraph,\n} from './styles';\nimport GraphicAnalyze from '../../components/graphicAnalyze';\n\nfunction Analyze() {\n    const [value, setValue] = useState(false);\n    const [textArea, setTextArea] = useState('Aguardando dados...');\n    const [lines, setLines] = useState('temperature');\n    const [zoom, setZoom] = useState(false);\n    const [model, setModel] = useState(false);\n    const [load, setLoad] = useState(false);\n\n    const handleCalc = (data) => {\n        let max = parseFloat(data[0]);\n        let avg = 0;\n        data.forEach((element) => {\n            if (parseFloat(element) > max) {\n                max = parseFloat(element);\n            }\n            avg += parseFloat(element);\n        });\n        return {\n            max,\n            avg: (avg / data.length).toFixed(2),\n        };\n    };\n\n    const handleLoad = (data) => {\n        setLoad(true);\n        setModel(ModelData[data.modelo[0]]);\n        setTextArea(\n            data.label\n                .concat(\n                    Object.keys(data)\n                        .map((parameter, index) => {\n                            if (\n                                parameter !== 'timeStamp' &&\n                                parameter !== 'label'\n                            ) {\n                                if (\n                                    parameter !== 'Vaso de Pressão(ºC)' &&\n                                    (parameter.split(' ').length > 1 ||\n                                        index === 0)\n                                ) {\n                                    return `\\n${parameter}: ${data[parameter][0]}`;\n                                }\n                                const aux = handleCalc(data[parameter]);\n                                return `\\n${parameter} -> Máximo: ${aux.max} Média: ${aux.avg}`;\n                            }\n                            return null;\n                        })\n                        .join(','),\n                )\n                .replace(',', ''),\n        );\n        data.modelo = ModelData[data.modelo[0]];\n        setValue(data);\n        window.api.stop('dataCSV');\n    };\n\n    const handleButtonLoad = (event) => {\n        event.preventDefault();\n        window.api.send('loadCSV', true);\n        window.api.receive('dataCSV', handleLoad);\n    };\n\n    const handleChangeLines = (event) => {\n        event.preventDefault();\n        setLines(event.target.value);\n    };\n\n    const handleResetZoom = (event) => {\n        event.preventDefault();\n        setZoom(true);\n        setTimeout(() => {\n            setZoom(false);\n        }, 10);\n    };\n\n    return (\n        <Container>\n            <MenuBar changeWindow={false} />\n            <DivTest>\n                <Header>\n                    <Title> Analisar</Title>\n                    <ButtonBar>\n                        <Button\n                            title=\"Carregar conjunto de dados\"\n                            onClick={(e) => handleButtonLoad(e)}\n                        >\n                            {' '}\n                            Carregar dados{' '}\n                        </Button>\n                        {model ? (\n                            <>\n                                <Select\n                                    title=\"Selecionar linhas do gráfico\"\n                                    value={lines}\n                                    onChange={(e) => handleChangeLines(e)}\n                                >\n                                    {model.scales.map((scale) => {\n                                        return (\n                                            <option\n                                                title={scale.title}\n                                                value={scale.id}\n                                            >\n                                                {scale.name}\n                                            </option>\n                                        );\n                                    })}\n                                </Select>\n                                <Button\n                                    title=\"Voltar o nivel do zoom ao valor inicial\"\n                                    onClick={(e) => handleResetZoom(e)}\n                                >\n                                    {' '}\n                                    Reset Zoom{' '}\n                                </Button>\n                            </>\n                        ) : null}\n                    </ButtonBar>\n                </Header>\n                <Main>\n                    <DivGraph>\n                        {load ? (\n                            <GraphicAnalyze\n                                data={value}\n                                lines={lines}\n                                zoom={zoom}\n                                model={model}\n                            />\n                        ) : (\n                            <BsClockHistory\n                                size={48}\n                                style={{\n                                    color: '#003b4d',\n                                    backgroundColor: 'inherit',\n                                }}\n                            />\n                        )}\n                    </DivGraph>\n                    <DivResult>\n                        <TextArea disabled value={textArea} />\n                    </DivResult>\n                </Main>\n            </DivTest>\n        </Container>\n    );\n}\n\nexport default Analyze;\n","import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport * as Zoom from 'chartjs-plugin-zoom';\n\nfunction GraphicCompare(props) {\n    const refCanvas = useRef(null);\n\n    useEffect(() => {\n        if (props.model) {\n            refCanvas.current = new Chart(refCanvas.current.getContext('2d'), {\n                type: 'line',\n                data: {\n                    datasets: [\n                        {\n                            label: props.labels[0],\n                            borderColor: 'red',\n                            backgroundColor: 'red',\n                            fill: false,\n                            yAxisID: props.model.scales[0].id,\n                            data: [],\n                        },\n                        {\n                            label: props.labels[1],\n                            borderColor: 'blue',\n                            backgroundColor: 'blue',\n                            fill: false,\n                            yAxisID: props.model.scales[0].id,\n                            data: [],\n                        },\n                    ],\n                },\n                options: {\n                    title: {\n                        display: true,\n                        text: '',\n                        fontSize: 30,\n                        fontColor: '#214f62',\n                    },\n                    tooltips: {\n                        enabled: true,\n                        mode: 'nearest',\n                        intersect: false,\n                        position: 'average',\n                    },\n                    plugins: {\n                        zoom: {\n                            zoom: {\n                                enabled: true,\n                                mode: 'xy',\n                                drag: false,\n                                threshold: 0,\n                            },\n                            pan: {\n                                enabled: true,\n                                mode: 'xy',\n                                threshold: 0,\n                            },\n                        },\n                    },\n                    animation: {\n                        duration: 0,\n                    },\n                    elements: {\n                        line: {\n                            tension: 0,\n                            borderWidth: 0.5,\n                        },\n                        point: {\n                            radius: 0,\n                        },\n                    },\n                    responsiveAnimationDuration: 0,\n                    maintainAspectRatio: false,\n                    responsive: true,\n                    scales: {\n                        xAxes: [\n                            {\n                                type: 'time',\n                                display: true,\n                                time: {\n                                    unit: 'second',\n                                    displayFormats: {\n                                        second: 'HH:mm:ss',\n                                    },\n                                    tooltipFormat: 'HH:mm:ss.SSS',\n                                },\n                                distribution: 'series',\n                                gridLines: {\n                                    display: true,\n                                    color: '#d3d3d3',\n                                },\n                                ticks: {\n                                    display: true,\n                                    fontColor: 'black',\n                                },\n                                scaleLabel: {\n                                    display: true,\n                                    labelString: 'Tempo Decorrido',\n                                    fontColor: 'black',\n                                    fontSize: 18,\n                                },\n                            },\n                        ],\n                        yAxes: props.model.scales.map((scale) => {\n                            return {\n                                display: true,\n                                scaleLabel: {\n                                    display: true,\n                                    labelString: scale.name,\n                                    fontColor: 'black',\n                                    fontSize: 18,\n                                },\n                                position: scale.position,\n                                gridLines: {\n                                    display: true,\n                                    color: '#d3d3d3',\n                                    drawOnChartArea: true,\n                                },\n                                ticks: {\n                                    display: true,\n                                    maxTicksLimit: 20,\n                                    min: scale.min,\n                                    suggestedMax: scale.max,\n                                    fontColor: 'black',\n                                },\n                                id: scale.id,\n                            };\n                        }),\n                    },\n                },\n            });\n        }\n    }, [props.model]);\n\n    useEffect(() => {\n        if (\n            refCanvas.current.chart &&\n            props.title &&\n            props.unit &&\n            props.data\n        ) {\n            refCanvas.current.chart.data.datasets[0].yAxisID = props.unit;\n            refCanvas.current.chart.options.title.text = props.title;\n            refCanvas.current.chart.options.scales.yAxes.forEach((scale) => {\n                if (scale.id === props.unit) {\n                    scale.display = true;\n                } else {\n                    scale.display = false;\n                }\n            });\n            refCanvas.current.chart.data.datasets[0].label =\n                props.data[0].label;\n            refCanvas.current.chart.data.datasets[0].data = props.data[0].data.map(\n                (value, index) => {\n                    return {\n                        x: parseInt(props.data[0].timeStamp[index], 10),\n                        y: value,\n                    };\n                },\n            );\n            if (props.data[1].data) {\n                refCanvas.current.chart.data.datasets[1].yAxisID = props.unit;\n                refCanvas.current.chart.data.datasets[1].label =\n                    props.data[1].label;\n                refCanvas.current.chart.data.datasets[1].data = props.data[1].data.map(\n                    (value, index) => {\n                        return {\n                            x: parseInt(props.data[1].timeStamp[index], 10),\n                            y: value,\n                        };\n                    },\n                );\n            }\n            refCanvas.current.chart.update(0);\n        }\n    }, [props.data]);\n\n    useEffect(() => {\n        if (refCanvas.current.chart && props.zoom) {\n            refCanvas.current.chart.resetZoom();\n            refCanvas.current.chart.update(0);\n        }\n    }, [props.zoom]);\n\n    return <canvas style={{\"backgroundColor\":\"white\"}} ref={refCanvas} />;\n}\n\nexport default GraphicCompare;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    flex-flow: column wrap;\n    justify-content: flex-start;\n    align-content: flex-start;\n    background-color: white;\n`;\n\nconst DivTest = styled.div`\n    height: 100%;\n    width: calc(100% - 140px);\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: center;\n    align-items: flex-start;\n    background-color: inherit;\n`;\n\nconst Header = styled.div`\n    height: 10%;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst Title = styled.label`\n    align-self: auto;\n    margin-left: 3%;\n    font-size: 200%;\n    color: #0f5aa1;\n    background-color: inherit;\n`;\n\nconst Button = styled.button`\n    align-self: auto;\n    height: 80%;\n    color: white;\n    margin: 2px;\n    border: none;\n    padding: 2px;\n    border: none;\n    background-color: #0f5aa1;\n    border-radius: 5px;\n    cursor: pointer;\n    &:hover {\n        border: 1px solid #0f5aa1;\n        background-color: white;\n        color: #0f5aa1;\n    }\n`;\n\nconst ButtonBar = styled.div`\n    height: 80%;\n    align-self: auto;\n    display: flex;\n    margin-right: 5px;\n    flex-flow: row nowrap;\n    justify-content: space-around;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst Main = styled.div`\n    height: 90%;\n    width: 100%;\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: center;\n    align-items: flex-start;\n    background-color: inherit;\n`;\n\nconst DivGraph = styled.div`\n    height: 85%;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst DivResult = styled.div`\n    height: 15%;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    border-top: 1px dotted black;\n`;\n\nconst TextArea = styled.textarea`\n    height: 100%;\n    width: 50%;\n    border-right: 1px dotted black;\n    background-color: lightgray;\n    color: black;\n    font-size: 15px;\n    resize: none;\n`;\n\nconst Select = styled.select`\n    align-self: auto;\n    height: 80%;\n    color: white;\n    margin: 2px;\n    padding: 2px;\n    border: none;\n    background-color: #0f5aa1;\n    border-radius: 5px;\n    cursor: pointer;\n    &:hover {\n        border: 1px solid #0f5aa1;\n        background-color: white;\n        color: #0f5aa1;\n    }\n`;\n\nexport {\n    Container,\n    Button,\n    ButtonBar,\n\n    Title,\n    DivGraph,\n    Select,\n    DivTest,\n    TextArea,\n    Main,\n    Header,\n    DivResult,\n};\n","import React, { useEffect, useState } from 'react';\nimport { BsClockHistory } from 'react-icons/bs';\nimport MenuBar from '../../components/menuBar';\nimport GraphicCompare from '../../components/graphicCompare';\nimport ModelData from '../../configs';\nimport {\n    Container,\n    ButtonBar,\n    Title,\n    Button,\n    Header,\n    Select,\n    TextArea,\n    DivTest,\n    Main,\n    DivResult,\n    DivGraph,\n} from './styles';\n\nfunction Teste1() {\n    const [data1, setData1] = useState(false);\n    const [data2, setData2] = useState(false);\n    const [show, setShow] = useState(false);\n    const [type, setType] = useState(false);\n    const [zoom, setZoom] = useState(false);\n    const [unit, setUnit] = useState(false);\n    const [model, setModel] = useState(false);\n    const [textArea1, setTextArea1] = useState('Aguardando dados...');\n    const [textArea2, setTextArea2] = useState('Aguardando dados...');\n\n    const handleLoad1 = (data) => {\n        setData1(data);\n        window.api.stop('dataCSV');\n    };\n\n    useEffect(() => {\n        if (data1) {\n            setModel(ModelData[data1.modelo[0]]);\n        }\n    }, [data1]);\n\n    const handleLoad2 = (data) => {\n        if (ModelData[data.modelo[0]].name === model.name) {\n            setData2(data);\n        } else {\n            window.api.send('modelErro');\n        }\n        window.api.stop('dataCSV');\n    };\n\n    const handleStart1 = (event) => {\n        event.preventDefault();\n        window.api.send('loadCSV', true);\n        window.api.receive('dataCSV', handleLoad1);\n    };\n\n    const handleStart2 = (event) => {\n        event.preventDefault();\n        window.api.send('loadCSV', true);\n        window.api.receive('dataCSV', handleLoad2);\n    };\n\n    const handleCalc = (value) => {\n        let max = parseFloat(value[0]);\n        let avg = 0;\n        value.forEach((element) => {\n            if (parseFloat(element) > max) {\n                max = parseFloat(element);\n            }\n            avg += parseFloat(element);\n        });\n        return {\n            max,\n            avg: (avg / value.length).toFixed(2),\n        };\n    };\n\n    useEffect(() => {\n        if (model) {\n            model.parameters.forEach((parameter) => {\n                if (parameter.name === type) {\n                    setUnit(parameter.idScales);\n                }\n            });\n            setShow([\n                {\n                    data: data1[type],\n                    timeStamp: data1.timeStamp,\n                    label: data1.label,\n                },\n                {\n                    data: data2[type],\n                    timeStamp: data2.timeStamp,\n                    label: data2.label,\n                },\n            ]);\n            setTextArea1(\n                data1.label\n                    .concat(\n                        Object.keys(data1)\n                            .map((parameter, index) => {\n                                if (\n                                    parameter !== 'timeStamp' &&\n                                    parameter !== 'label'\n                                ) {\n                                    if (\n                                        parameter !== 'Vaso de Pressão(ºC)' &&\n                                        (parameter.split(' ').length > 1 ||\n                                            index === 0)\n                                    ) {\n                                        return `\\n${parameter}: ${data1[parameter][0]}`;\n                                    }\n                                    const aux = handleCalc(data1[parameter]);\n                                    return `\\n${parameter} -> Máximo: ${aux.max} Média: ${aux.avg}`;\n                                }\n                                return null;\n                            })\n                            .join(','),\n                    )\n                    .replace(',', ''),\n            );\n            if (data2) {\n                setTextArea2(\n                    data2.label\n                        .concat(\n                            Object.keys(data2)\n                                .map((parameter, index) => {\n                                    if (\n                                        parameter !== 'timeStamp' &&\n                                        parameter !== 'label'\n                                    ) {\n                                        if (\n                                            parameter !==\n                                                'Vaso de Pressão(ºC)' &&\n                                            (parameter.split(' ').length > 1 ||\n                                                index === 0)\n                                        ) {\n                                            return `\\n${parameter}: ${data2[parameter][0]}`;\n                                        }\n                                        const aux = handleCalc(\n                                            data2[parameter],\n                                        );\n                                        return `\\n${parameter} -> Máximo: ${aux.max} Média: ${aux.avg}`;\n                                    }\n                                    return null;\n                                })\n                                .join(','),\n                        )\n                        .replace(',', ''),\n                );\n            }\n        }\n    }, [type, data1, data2]);\n\n    useEffect(() => {\n        if (model) {\n            setType(model.parameters[0].name);\n            setUnit(model.parameters[0].idScales);\n        }\n    }, [model]);\n\n    const handleChangeType = (event) => {\n        event.preventDefault();\n        setType(event.target.value);\n    };\n\n    const handleResetZoom = (event) => {\n        event.preventDefault();\n        setZoom(true);\n        setInterval(() => {\n            setZoom(false);\n        }, 10);\n    };\n\n    return (\n        <Container>\n            <MenuBar changeWindow={false} />\n            <DivTest>\n                <Header>\n                    <Title> Comparar</Title>\n                    <ButtonBar>\n                        <Button\n                            onClick={(e) => handleStart1(e)}\n                            title=\"Carregar primeiro conjunto de dados\"\n                        >\n                            {' '}\n                            Carregar dados1{' '}\n                        </Button>\n                        <Button\n                            onClick={(e) => handleStart2(e)}\n                            title=\"Carregar segundo conjunto de dados\"\n                        >\n                            {' '}\n                            Carregar dados2{' '}\n                        </Button>\n                        {model ? (\n                            <>\n                                <Select\n                                    value={type}\n                                    onChange={(e) => handleChangeType(e)}\n                                    title=\"Selecionar parâmetro para visualização\"\n                                >\n                                    {model.parameters.map((parameter) => {\n                                        return (\n                                            <option\n                                                title={parameter.title}\n                                                value={parameter.name}\n                                            >\n                                                {parameter.name}\n                                            </option>\n                                        );\n                                    })}\n                                </Select>\n                                <Button\n                                    onClick={(e) => handleResetZoom(e)}\n                                    title=\"Voltar o nivel do zoom ao valor inicial\"\n                                >\n                                    {' '}\n                                    Reset Zoom{' '}\n                                </Button>\n                            </>\n                        ) : null}\n                    </ButtonBar>\n                </Header>\n                <Main>\n                    <DivGraph>\n                        {model ? (\n                            <GraphicCompare\n                                data={show}\n                                model={model}\n                                title={type}\n                                labels={[data1.label, data2.label]}\n                                zoom={zoom}\n                                unit={unit}\n                            />\n                        ) : (\n                            <BsClockHistory\n                                size={48}\n                                style={{\n                                    color: '#003b4d',\n                                    backgroundColor: 'inherit',\n                                }}\n                            />\n                        )}\n                    </DivGraph>\n                    <DivResult>\n                        <TextArea disabled value={textArea1} />\n                        <TextArea disabled value={textArea2} />\n                    </DivResult>\n                </Main>\n            </DivTest>\n        </Container>\n    );\n}\n\nexport default Teste1;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    flex-flow: column wrap;\n    justify-content: flex-start;\n    align-content: flex-start;\n    background-color: white;\n`;\n\nconst DivTest = styled.div`\n    height: 100%;\n    width: calc(100% - 140px);\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: flex-start;\n    align-items: flex-start;\n    background-color: white;\n`;\n\nconst Header = styled.div`\n    height: 10%;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #003b4d;\n`;\n\nconst Title = styled.label`\n    align-self: auto;\n    margin-left: 3%;\n    font-size: 200%;\n    color: white;\n    background-color: inherit;\n`;\n\nconst Button = styled.input`\n    min-height: 40%;\n    min-width: 10%;\n    border: none;\n    border-radius: 5px;\n    margin: 10px;\n    color: white;\n    background-color: #0f5aa1;\n    cursor: pointer;\n    &:hover {\n        border: 1px solid #0f5aa1;\n        background-color: white;\n        color: #0f5aa1;\n    }\n`;\n\nconst Element = styled.div`\n    height: 20%;\n    width: 80%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    background-color: white;\n    border: 1px dotted red;\n`;\n\nconst Main = styled.div`\n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    background-color: white;\n    opacity: ${(props) => props.opacity};\n`;\n\nconst Form = styled.form`\n    height: 80%;\n    width: 100%;\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: center;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst Fields = styled.form`\n    height: 80%;\n    width: 100%;\n    display: flex;\n    flex-flow: column wrap;\n    justify-content: center;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst FormLeft = styled.div`\n    height: 70%;\n    width: 40%;\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: center;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst FormRigth = styled.div`\n    height: 70%;\n    width: 60%;\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: center;\n    align-items: center;\n    background-color: inherit;\n`;\n\nconst Input = styled.input`\n    height: 10%;\n    width: 80%;\n    margin-bottom: 2px;\n    font-size: 100%;\n    border: none;\n    border-bottom: 2px solid ${(props) => props.lineColor};\n    &:focus {\n        border-bottom: 2px solid #0083c1;\n    }\n    background-color: inherit;\n`;\n\nconst Select = styled.select`\n    height: 10%;\n    width: 80%;\n    margin-bottom: 2px;\n    font-size: 100%;\n    border: none;\n    border-bottom: 2px solid ${(props) => props.lineColor};\n    &:focus {\n        border-bottom: 2px solid #0083c1;\n    }\n    background-color: inherit;\n`;\n\nconst InputFile = styled.label`\n    height: 10%;\n    width: 80%;\n    margin-bottom: 2px;\n    font-size: 100%;\n    border: none;\n    border-bottom: 2px solid ${(props) => props.lineColor};\n    &:focus {\n        border-bottom: 2px solid #0083c1;\n    }\n    background-color: inherit;\n`;\n\nconst TextArea = styled.textarea`\n    height: 90%;\n    width: 90%;\n    padding: 5px;\n    font-size: 15px;\n    resize: none;\n    border: 2px solid ${(props) => props.lineColor};\n    &:focus {\n        border: 2px solid #0083c1;\n    }\n    border-radius: 10px;\n    background-color: inherit;\n`;\n\nconst DivFiles = styled.div`\n    height: 10%;\n    width: 80%;\n    padding: 10px;\n    color: #003b4d;\n`;\n\nconst DivButton = styled.div`\n    height: 20%;\n    width: 80%;\n    margin: 5px;\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: center;\n    align-items: center;\n    background-color: inherit;\n`;\n\nexport {\n    Container,\n    Header,\n    Button,\n    Select,\n    Element,\n    Title,\n    DivTest,\n    Main,\n    Input,\n    InputFile,\n    TextArea,\n    Form,\n    FormLeft,\n    FormRigth,\n    Fields,\n    DivFiles,\n    DivButton,\n};\n","import React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport MenuBar from '../../components/menuBar';\n\nimport {\n    Container,\n    Title,\n    Header,\n    DivTest,\n    Main,\n    TextArea,\n    Input,\n    InputFile,\n    Form,\n    Fields,\n    FormLeft,\n    FormRigth,\n    Button,\n    Select,\n    DivFiles,\n    DivButton,\n    ButtonBar,\n} from './styles';\n\nfunction SendData() {\n    const handleTest = (data) => {\n        let result = true;\n        Object.keys(data).forEach((element) => {\n            if (data[element].size > 3000000) {\n                result = false;\n            }\n        });\n        return result;\n    };\n\n    const schema = yup.object().shape({\n        name: yup.string().min(3, 'Minimo 3 caracteres').required(),\n        serie: yup\n            .string()\n            .matches(/^[0-9]+$/, 'Código inválido')\n            .min(6, 'Código inválido')\n            .required(),\n        code: yup\n            .string()\n            .matches(/^[0-9]+$/, 'Código inválido')\n            .min(30, 'Código inválido')\n            .required(),\n        model: yup.string().required('Selecione uma opção'),\n        cycle: yup.string().required('Selecione uma opção'),\n        description: yup.string().min(20, 'Minimo 20 caracteres').required(),\n        file: yup\n            .mixed()\n            .test('Arquivo deve ter no maximo 3mb', (value) =>\n                handleTest(value),\n            ),\n    });\n\n    const { register, handleSubmit, reset, getValues, errors } = useForm({\n        resolver: yupResolver(schema),\n    });\n\n    const [colorName, setColorName] = useState('#003B4D');\n    const [colorSerie, setColorSerie] = useState('#003B4D');\n    const [colorCode, setColorCode] = useState('#003B4D');\n    const [colorFile, setColorFile] = useState('#003B4D');\n    const [colorModel, setColorModel] = useState('#003B4D');\n    const [colorCycle, setColorCycle] = useState('#003B4D');\n    const [colorDescription, setColorDescription] = useState('#003B4D');\n    const [files, setFiles] = useState([]);\n    const [opacity, setOpacity] = useState(1);\n    const [sending, setSending] = useState(false);\n\n    const handleReport = (data) => {\n        window.api.stop('report');\n        setOpacity(1);\n        setSending(false);\n        setFiles([]);\n        reset();\n        setColorName('#003b4d');\n        setColorSerie('#003b4d');\n        setColorCode('#003b4d');\n        setColorFile('#003b4d');\n        setColorModel('#003b4d');\n        setColorCycle('#003b4d');\n        setColorDescription('#003b4d');\n    };\n\n    const onSubmit = (data) => {\n        data.file = files;\n        setSending(true);\n        setOpacity(0.5);\n        window.api.send('Report', data);\n        window.api.receive('report', handleReport);\n    };\n\n    const handleName = (data) => {\n        schema.fields.name.isValid(getValues().name).then((e) => {\n            if (e) {\n                setColorName('green');\n            } else {\n                setColorName('red');\n            }\n        });\n    };\n\n    const handleSerie = (data) => {\n        schema.fields.serie.isValid(getValues().serie).then((e) => {\n            if (e) {\n                setColorSerie('green');\n            } else {\n                setColorSerie('red');\n            }\n        });\n    };\n\n    const handleCode = (data) => {\n        schema.fields.code.isValid(getValues().code).then((e) => {\n            if (e) {\n                setColorCode('green');\n            } else {\n                setColorCode('red');\n            }\n        });\n    };\n\n    const handleModel = (data) => {\n        schema.fields.model.isValid(getValues().model).then((e) => {\n            if (e) {\n                setColorModel('green');\n            } else {\n                setColorModel('red');\n            }\n        });\n    };\n\n    const handleCycle = (data) => {\n        schema.fields.cycle.isValid(getValues().cycle).then((e) => {\n            if (e) {\n                setColorCycle('green');\n            } else {\n                setColorCycle('red');\n            }\n        });\n    };\n\n    const handleDescription = (data) => {\n        schema.fields.description.isValid(getValues().description).then((e) => {\n            if (e) {\n                setColorDescription('green');\n            } else {\n                setColorDescription('red');\n            }\n        });\n    };\n\n    const handleFile = (data) => {\n        data.preventDefault();\n        schema.fields.file.isValid(getValues().file).then((e) => {\n            if (e) {\n                const temp = [];\n                Object.keys(data.target.files).forEach((file) => {\n                    temp.push(data.target.files[file].path);\n                });\n                setFiles(temp);\n                errors.file = null;\n                setColorFile('green');\n            } else {\n                setFiles([]);\n                errors.file.message = 'Todos os arquivos devem ter até 3MB';\n                setColorFile('red');\n            }\n        });\n    };\n\n    const handleReset = (event) => {\n        event.preventDefault();\n        setFiles([]);\n        reset();\n    }\n\n    return (\n        <Container>\n            <MenuBar changeWindow={false} />\n            <DivTest>\n                <Main opacity={opacity}>\n                    {sending ? (\n                        <label style={{ color: '#003b4d', fontSize: '28px' }}>\n                            Enviando Mensagem...\n                        </label>\n                    ) : (\n                        <Form onSubmit={handleSubmit(onSubmit)}>\n                            <Fields>\n                                <FormLeft>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"name\"\n                                        onBlur={handleName}\n                                        ref={register}\n                                        placeholder=\"Nome:\"\n                                        lineColor={colorName}\n                                    />\n                                    {errors ? (\n                                        <label style={{ color: 'red' }}>\n                                            {errors.name?.message}\n                                        </label>\n                                    ) : null}\n                                    <Input\n                                        type=\"text\"\n                                        name=\"serie\"\n                                        onBlur={handleSerie}\n                                        ref={register}\n                                        placeholder=\"Número de serie:\"\n                                        lineColor={colorSerie}\n                                    />\n                                    {errors ? (\n                                        <label style={{ color: 'red' }}>\n                                            {errors.serie?.message}\n                                        </label>\n                                    ) : null}\n                                    <Input\n                                        type=\"text\"\n                                        name=\"code\"\n                                        onBlur={handleCode}\n                                        ref={register}\n                                        placeholder=\"Código da assistência:\"\n                                        lineColor={colorCode}\n                                    />\n                                    {errors ? (\n                                        <label style={{ color: 'red' }}>\n                                            {errors.code?.message}\n                                        </label>\n                                    ) : null}\n                                    <Select\n                                        name=\"model\"\n                                        onBlur={handleModel}\n                                        ref={register}\n                                        lineColor={colorModel}\n                                    >\n                                        <option\n                                            value=\"\"\n                                            disabled\n                                            selected\n                                            hidden\n                                        >\n                                            {' '}\n                                            Modelo da autoclave{' '}\n                                        </option>\n                                        <option value=\"vdr300\">\n                                            {' '}\n                                            VDR 3.00{' '}\n                                        </option>\n                                        <option value=\"Modelo\">\n                                            {' '}\n                                            Modelo 2{' '}\n                                        </option>\n                                    </Select>\n                                    {errors ? (\n                                        <label style={{ color: 'red' }}>\n                                            {errors.model?.message}\n                                        </label>\n                                    ) : null}\n                                    <Select\n                                        name=\"cycle\"\n                                        onBlur={handleCycle}\n                                        ref={register}\n                                        lineColor={colorCycle}\n                                    >\n                                        <option\n                                            value=\"\"\n                                            disabled\n                                            selected\n                                            hidden\n                                        >\n                                            {' '}\n                                            Ciclo realizado:{' '}\n                                        </option>\n                                        <option value=\"10min\">\n                                            {' '}\n                                            Ciclo 10min{' '}\n                                        </option>\n                                        <option value=\"Modelo\">\n                                            {' '}\n                                            Ciclo 20min{' '}\n                                        </option>\n                                    </Select>\n                                    {errors ? (\n                                        <label style={{ color: 'red' }}>\n                                            {errors.cycle?.message}\n                                        </label>\n                                    ) : null}\n                                    <InputFile lineColor={colorFile}>\n                                        Anexos:\n                                        <input\n                                            style={{ display: 'none' }}\n                                            name=\"file\"\n                                            ref={register}\n                                            type=\"file\"\n                                            multiple\n                                            onChange={(e) => handleFile(e)}\n                                        />\n                                    </InputFile>\n                                    {errors ? (\n                                        <label style={{ color: 'red' }}>\n                                            {errors.file?.message}\n                                        </label>\n                                    ) : null}\n                                    <DivFiles>\n                                        {files ? (\n                                            <ul>\n                                                {files.map((file) => {\n                                                    return <li>{file}</li>;\n                                                })}\n                                            </ul>\n                                        ) : null}\n                                    </DivFiles>\n                                </FormLeft>\n                                <FormRigth>\n                                    <TextArea\n                                        name=\"description\"\n                                        onBlur={handleDescription}\n                                        ref={register}\n                                        placeholder=\"Descrição:\"\n                                        lineColor={colorDescription}\n                                    />\n                                    {errors ? (\n                                        <label style={{ color: 'red' }}>\n                                            {errors.description?.message}\n                                        </label>\n                                    ) : null}\n                                </FormRigth>\n                            </Fields>\n                            <DivButton>\n                                <Button onClick={handleReset} ref={register} type=\"reset\" />\n                                <Button ref={register} type=\"submit\" />\n                            </DivButton>\n                        </Form>\n                    )}\n                </Main>\n            </DivTest>\n        </Container>\n    );\n}\n\nexport default SendData;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\nimport Login from './pages/login';\nimport Monitor from './pages/monitor';\nimport Teste1 from './pages/teste1';\nimport Analyze from './pages/analyze';\nimport Compare from './pages/compare';\nimport SendData from './pages/sendData';\n\nimport './index.css';\n\nwindow.onload = () => {\n    ReactDOM.render(\n        <HashRouter basename=\"/\">\n            <Switch>\n                <Route path=\"/\" component={Login} exact />\n                <Route path=\"/monitor\" component={Monitor} exact />\n                <Route path=\"/teste1\" component={Teste1} exact />\n                <Route path=\"/analise\" component={Analyze} exact />\n                <Route path=\"/compare\" component={Compare} exact />\n                <Route path=\"/sendData\" component={SendData} exact />\n            </Switch>\n        </HashRouter>,\n        document.getElementById('root'),\n    );\n};\n"],"sourceRoot":""}